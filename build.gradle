plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'rs.ac.bg.fon'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}



repositories {
    mavenCentral()
}

ext {
    mapstructVersion = '1.5.5.Final'
    openApiVersion = '2.3.0'
    testContainersVersion = '1.19.4'
    jsonWebToken = '0.12.5'
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.liquibase:liquibase-core',
            "org.mapstruct:mapstruct:${mapstructVersion}",
            'org.slf4j:slf4j-api:latest.release',
            "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}",
            "io.jsonwebtoken:jjwt-api:${jsonWebToken}",
            'org.springframework.boot:spring-boot-starter-amqp'
    )
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly(
            'org.postgresql:postgresql',
            "io.jsonwebtoken:jjwt-impl:${jsonWebToken}",
            "io.jsonwebtoken:jjwt-jackson:${jsonWebToken}"
    )
    annotationProcessor(
            'org.projectlombok:lombok',
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    )
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            'org.springframework.boot:spring-boot-starter-webflux',
            "org.testcontainers:testcontainers:${testContainersVersion}",
            "org.testcontainers:junit-jupiter:${testContainersVersion}",
            "org.testcontainers:postgresql:${testContainersVersion}"
    )
}

jib {
    from {
        image = 'eclipse-temurin:17'
    }
    to {
        image = "docker.io/${project.findProperty('docker-username')}/${project.findProperty('docker-image-name')}:${project.findProperty('docker-image-tag')}"
        auth {
            username = "${project.findProperty('docker-username')}"
            password = "${project.findProperty('docker-password')}"
        }
    }
}

task skipSpringBootTestAndDataJpaTest(type: Test) {
    useJUnitPlatform {
        excludeTags 'springboot', 'datajpa'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}