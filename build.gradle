plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'rs.ac.bg.fon'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = '1.5.5.Final'
	jacksonVersion = '2.7.3'
	openApiVersion = '2.3.0'
	testContainersVersion = '1.19.4'
	jsonWebToken = '0.12.5'

}

dependencies {
	implementation(
			"org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}",
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-web',
			'org.liquibase:liquibase-core',
			'org.springframework.boot:spring-boot-starter-validation',
			"org.mapstruct:mapstruct:${mapstructVersion}",
			'org.springframework.boot:spring-boot-starter-amqp',
			"io.jsonwebtoken:jjwt-api:${jsonWebToken}",
			'org.projectlombok:lombok',

			'org.springframework.boot:spring-boot-starter-webflux'
	)
	compileOnly(
			'org.projectlombok:lombok',
			"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
	)
	runtimeOnly(
			'org.postgresql:postgresql',
			"io.jsonwebtoken:jjwt-impl:${jsonWebToken}",
			"io.jsonwebtoken:jjwt-jackson:${jsonWebToken}"
	)

	annotationProcessor(
			'org.projectlombok:lombok',
			"org.mapstruct:mapstruct-processor:${mapstructVersion}"
	)
	testImplementation(
			"org.testcontainers:junit-jupiter:${testContainersVersion}",
			"org.testcontainers:postgresql:${testContainersVersion}",
			"org.testcontainers:rabbitmq:${testContainersVersion}",

			"org.testcontainers:testcontainers:${testContainersVersion}",
			'org.springframework.amqp:spring-rabbit-test',
			'org.springframework.boot:spring-boot-starter-test',
			'org.springframework.security:spring-security-test'
	)
}

jib {
	from {
		image = 'eclipse-temurin:17'
	}
	to {
		image = "docker.io/${project.findProperty('docker-username')}/${project.findProperty('docker-image-name')}:${project.findProperty('docker-image-tag')}"
		auth {
			username = "${project.findProperty('docker-username')}"
			password = "${project.findProperty('docker-password')}"
		}
	}
}

task skipSpringBootTestAndDataJpaTest(type: Test) {
	useJUnitPlatform {
		excludeTags 'springboot', 'datajpa'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


tasks.named('test') {
	useJUnitPlatform()
}
